#!/bin/bash

function RunIfMatch()
{
	if [ "$request" == "$era" ]
	then
		success="True"

		cp "conditions.py" "$dir"

		cat "templates/reco_cfg.py" | sed "\
				s|\$year|$year|;\
				s|\$input|$input|;\
				s|\$rpId_45_F|$rpId_45_F|;\
				s|\$rpId_45_N|$rpId_45_N|;\
				s|\$rpId_56_N|$rpId_56_N|;\
				s|\$rpId_56_F|$rpId_56_F|;\
				s|\$output|reco_plots.root|;\
			" > "$dir/cfg.py"

		cd "$dir"

		cmsRun "cfg.py" &> "log" &

		cd - &> /dev/null
	fi
}

#----------------------------------------------------------------------------------------------------

function ProcessOneReco()
{
	request="$1"

	success="False"

	#--------------------

	year="2016"
	rpId_45_F="3"
	rpId_45_N="2"
	rpId_56_N="102"
	rpId_56_F="103"

	era="2016_preTS2"; input="root://eoscms.cern.ch//eos/cms/store/group/phys_pps/sw_test_input/EAD70032-8836-E611-8C11-02163E014154.root"
	RunIfMatch

	era="2016_postTS2"; input="root://eoscms.cern.ch//eos/cms/store/group/phys_pps/sw_test_input/3204EE5B-C298-E611-BC39-02163E01448F.root"
	RunIfMatch

	#--------------------

	year="2017"
	rpId_45_F="23"
	rpId_45_N="3"
	rpId_56_N="103"
	rpId_56_F="123"

	era="2017_preTS2"; input="root://eoscms.cern.ch//eos/cms/store/group/phys_pps/sw_test_input/8ED63519-2282-E711-9073-02163E01A3C6.root"
	RunIfMatch

	era="2017_postTS2"; input="root://eoscms.cern.ch//eos/cms/store/group/phys_pps/sw_test_input/001D08EE-C4B1-E711-B92D-02163E013864.root"
	RunIfMatch

	era="2017E_low_PU"; input="root://eoscms.cern.ch//eos/cms/store/group/phys_pps/sw_test_input/FEC2DE9E-AFA0-E711-98B1-02163E0143E5.root"
	RunIfMatch

	era="2017H_W_mass"; input="root://eoscms.cern.ch//eos/cms/store/group/phys_pps/sw_test_input/FE78107C-90D2-E711-84AB-02163E01A586.root"
	RunIfMatch

	#--------------------

	year="2018"
	rpId_45_F="23"
	rpId_45_N="3"
	rpId_56_N="103"
	rpId_56_F="123"

	era="2018"; input="root://eoscms.cern.ch//eos/cms/store/group/phys_pps/sw_test_input/601A721D-AD95-E811-B21A-FA163E28A50A.root"
	RunIfMatch

	era="2018A"; input="root://eoscms.cern.ch//eos/cms/store/group/phys_pps/sw_test_input/4E7ABE07-FE4C-E811-9395-FA163EC5FAA0.root"
	RunIfMatch

	era="2018B"; input="root://eoscms.cern.ch//eos/cms/store/group/phys_pps/sw_test_input/4E7E26D5-A368-E811-B205-FA163E0D66CE.root"
	RunIfMatch

	era="2018C"; input="root://eoscms.cern.ch//eos/cms/store/group/phys_pps/sw_test_input/FE1EE87D-FA83-E811-91D5-FA163E4DBEC7.root"
	RunIfMatch

	era="2018D"; input="root://eoscms.cern.ch//eos/cms/store/group/phys_pps/sw_test_input/D0D06D0E-9897-E811-99C9-FA163EBF0D83.root"
	RunIfMatch

	#--------------------

	if [ "$success" == "True" ]
	then
		echo "        - $request: executed"
	else
		echo "        - $request: failed"
	fi
}

#----------------------------------------------------------------------------------------------------

function ProcessOneDirsim()
{
	local period="$1"

	local year=""
	local era=""
	local config=""

	if [ "$period" == "2016" ]; then year="2016"; era="Run2_2016"; periods="config.profile_2016_preTS2,config.profile_2016_postTS2"; fi
	if [ "$period" == "2016_preTS2" ]; then year="2016"; era="Run2_2016"; periods="config.profile_2016_preTS2"; fi
	if [ "$period" == "2016_postTS2" ]; then year="2016"; era="Run2_2016"; periods="config.profile_2016_postTS2"; fi

	if [ "$period" == "2017" ]; then year="2017"; era="Run2_2017"; periods="config.profile_2017_preTS2,config.profile_2017_postTS2"; fi
	if [ "$period" == "2017_preTS2" ]; then year="2017"; era="Run2_2017"; periods="config.profile_2017_preTS2"; fi
	if [ "$period" == "2017_postTS2" ]; then year="2017"; era="Run2_2017"; periods="config.profile_2017_postTS2"; fi

	if [ "$period" == "2018" ]; then year="2018"; era="Run2_2018"; periods="config.profile_2018_preTS1,config.profile_2018_TS1_TS2,config.profile_2018_postTS2"; fi
	if [ "$period" == "2018_preTS1" ]; then year="2018"; era="Run2_2018"; periods="config.profile_2018_preTS1"; fi
	if [ "$period" == "2018_TS1_TS2" ]; then year="2018"; era="Run2_2018"; periods="config.profile_2018_TS1_TS2"; fi
	if [ "$period" == "2018_postTS2" ]; then year="2018"; era="Run2_2018"; periods="config.profile_2018_postTS2"; fi

	if [ -n "$era" ]
	then
		cat "templates/dirsim_cfg.py" | sed "\
				s|\$ERA|$era|;\
				s|\$YEAR|$year|;\
				s|\$PERIODS|$periods|;\
			" > "$dir/cfg.py"

		cd "$dir"

		cmsRun "cfg.py" &> "log" &

		cd - &> /dev/null

		echo "        - $period executed"
	else
		echo "        - $period failed"
	fi
}

#----------------------------------------------------------------------------------------------------

function ProcessOne()
{
	local wf="$1"
	local type="${wf%:*}"
	local period="${wf#*:}"

	echo "    $type : $period"

	dir="$output_dir/$wf"
	mkdir -p "$dir"

	case "$type" in
		"reco")
				ProcessOneReco "$period"
			;;

		"dirsim")
				ProcessOneDirsim "$period"
			;;

		*)
			echo "        - unknown type $type"
	esac
}

#----------------------------------------------------------------------------------------------------
# defaults

output_dir=""

force="False"

list="std"

declare -A lists

lists["reco_std"]="reco:2016_preTS2,reco:2016_postTS2,reco:2017_preTS2,reco:2017_postTS2,reco:2018"
lists["reco_full"]="reco:2016_preTS2,reco:2016_postTS2,reco:2017_preTS2,reco:2017_postTS2,reco:2017E_low_PU,reco:2017H_W_mass,reco:2018,reco:2018A,reco:2018B,reco:2018C,reco:2018D"

lists["dirsim_std"]="dirsim:2016,dirsim:2016_postTS2,dirsim:2017,dirsim:2017_postTS2,dirsim:2018,dirsim:2018_postTS2"
lists["dirsim_full"]="dirsim:2016,dirsim:2016_preTS2,dirsim:2016_postTS2,dirsim:2017,dirsim:2017_preTS2,dirsim:2017_postTS2,dirsim:2018,dirsim:2018_preTS1,dirsim:2018_TS1_TS2,dirsim:2018_postTS2"

lists["std"]="${lists[reco_std]},${lists[dirsim_std]}"

#----------------------------------------------------------------------------------------------------

function PrintUsage()
{
	echo "USAGE: run_multiple <option> <option> ..."
	echo "OPTIONS:"
	echo "    -o, --output <dir>      set output directory"
	echo "    -l, --list <list>       comma-separated list of tests, special groups:"

	for ln in ${!lists[@]}
	do
		echo "                                $ln"
	done

	echo "    -f                      force to overwrite the output directory"
}

#----------------------------------------------------------------------------------------------------
# parse command line

while [ -n "$1" ]
do
	case "$1" in
		"-o" | "--output")
				shift
				output_dir="$1"
			;;

		"-l" | "--list")
				shift
				list="$1"
			;;

		"-f")
				force="True"
			;;

		"-h" | "--help")
			PrintUsage
			exit 0
			;;

		*)
			echo "ERROR: argument '$1' not understood."
			PrintUsage
			exit 1
	esac

	shift
done

#----------------------------------------------------------------------------------------------------
# validate input

if [ -z "$output_dir" ]
then
	echo "ERROR: output dir not set"
	PrintUsage
	exit 1
fi

if [ -d "$output_dir" -a "$force" != "True" ]
then
	echo "ERROR: directory $output_dir already exists. Do the following to remove it:"
	echo "    rm -rf \"$output_dir\""
	exit 2
fi

#----------------------------------------------------------------------------------------------------
# expand period-list groups

for ln in ${!lists[@]}
do
	if [ "$list" == "$ln" ]
	then
		list="${lists[$ln]}"

		break
	fi
done

#----------------------------------------------------------------------------------------------------

# make output directory
echo "* $output_dir"
mkdir -p "$output_dir"

# make info file
(
	cd ..
	echo "DATE:"
	date

	echo ""
	echo "AT:"
	git log --oneline|head -n 1

	echo ""
	echo "STATUS:"
	git st
	cd - &> /dev/null
) > "$output_dir/info"

# go through list
while [ -n "$list" ]
do
	wf=${list%%,*}

	list_new=${list#*,}
	if [ "$list_new" == "$list" ]
	then
		list=""
	else
		list="$list_new"
	fi

	ProcessOne "$wf"
done
